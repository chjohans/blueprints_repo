blueprint:
  # Adapted from: https://github.com/gmlupatelli/blueprints_repo/blob/master/low_battery_notification/low_battery_notification.yaml
  name: Low battery level detection & notification for all battery sensors
  description: Regularly test all sensors with 'battery' device-class for crossing a certain battery level threshold and if so execute an action. Supports devices with a fixed value (e.g. 'low', 'medium', 'high') as their battery state indicator.
  domain: automation
  source_url: https://github.com/chjohans/blueprints_repo/blob/master/low_battery_notification/low_battery_notification.yaml


  input:
    threshold:
      name: Battery warning level threshold
      description: Battery sensors below threshold are assumed to be low-battery (as well as binary battery sensors with value on).
      default: 20
      selector:
        number:
          min: 5.0
          max: 100.0
          unit_of_measurement: '%'
          mode: slider
          step: 5.0

    use_battery_fixed_value:
      name: Use fixed value type battery sensors
      description: Use battery sensors that represent the battery level with a fixed string, e.g. high, medium, low, or some other value.
      default: False
      selector:
        boolean:
    battery_low_fixed_value:
      name: Low battery value
      description: Enter the string that represents a low battery level.
      default: low
      selector:
        text:

    time:
      name: Time to run automation
      description: Automation is being executed at the configured time
      default: '20:00:00'
      selector:
        time: {}

    monday_enabled:
      name: Monday
      description: Run automation every Monday
      default: true
      selector:
        boolean:
    tuesday_enabled:
      name: Tuesday
      description: Run automation every Tuesday
      default: true
      selector:
        boolean:
    wednesday_enabled:
      name: Wednesday
      description: Run automation every Wednesday
      default: true
      selector:
        boolean:
    thursday_enabled:
      name: Thursday
      description: Run automation every Thursday
      default: true
      selector:
        boolean:
    friday_enabled:
      name: Friday
      description: Run automation every Friday
      default: true
      selector:
        boolean:
    saturday_enabled:
      name: Saturday
      description: Run automation every Saturday
      default: true
      selector:
        boolean:
    sunday_enabled:
      name: Sunday
      description: Run automation every Sunday
      default: true
      selector:
        boolean:

    exclude:
      name: Excluded Sensors
      description: Battery sensors (e.g. smartphone) to exclude from detection. Only entities are supported, areas and devices must be expanded!
      default: {}
      selector:
        target:
          entity:
            device_class: battery

    actions:
      name: Actions
      description: Notifications or similar to be run. {{sensors}} is replaced with the names of sensors being low on battery.
      selector:
        action:


variables:
  monday_enabled: !input 'monday_enabled'
  tuesday_enabled: !input 'tuesday_enabled'
  wednesday_enabled: !input 'wednesday_enabled'
  thursday_enabled: !input 'thursday_enabled'
  friday_enabled: !input 'friday_enabled'
  saturday_enabled: !input 'saturday_enabled'
  sunday_enabled: !input 'sunday_enabled'

  current_day: '{{ now().weekday() | int }}'

  threshold: !input 'threshold'

  exclude: !input 'exclude'

  use_battery_fixed_value: !input 'use_battery_fixed_value'
  battery_low_fixed_value: !input 'battery_low_fixed_value'


  sensors: >-
    {% set result = namespace(sensors=[]) %}
    {% for state in states.sensor | selectattr('attributes.device_class', '==', 'battery') %}
      {% if exclude.entity_id is defined %}
        {% if 0 <= state.state | int(-1) < threshold | int and not state.entity_id in exclude.entity_id %}
          {% set result.sensors = result.sensors + [state.name ~ ' (' ~ state.state ~ ' %)'] %}
        {% elif use_battery_fixed_value and state.state == battery_low_fixed_value and not state.entity_id in exclude.entity_id %}
          {% set result.sensors = result.sensors + [state.name ~ ' (' ~ state.state ~ ')'] %}
        {% endif %}
      {% else %}
        {% if 0 <= state.state | int(-1) < threshold | int %}
          {% set result.sensors = result.sensors + [state.name ~ ' (' ~ state.state ~ ' %)'] %}
        {% elif use_battery_fixed_value and state.state == battery_low_fixed_value %}
          {% set result.sensors = result.sensors + [state.name ~ ' (' ~ state.state ~ ')'] %}
        {% endif %}
      {% endif %}
    {% endfor %}
    {% for state in states.binary_sensor | selectattr('attributes.device_class', '==', 'battery') | selectattr('state', '==', 'on') %}
      {% if exclude.entity_id is defined %}
        {% if not state.entity_id in exclude.entity_id %}
          {% set result.sensors = result.sensors + [state.name] %}
        {% endif %}
      {% else %}
        {% set result.sensors = result.sensors + [state.name] %}
      {% endif %}
    {% endfor %}
    {{result.sensors|join(', ')}}


trigger:
  - platform: time
    at: !input 'time'
condition:
  - condition: template
    value_template: >-
      '{{ 
        (current_day == 0 and monday_enabled) or 
        (current_day == 1 and tuesday_enabled) or 
        (current_day == 2 and wednesday_enabled) or
        (current_day == 3 and thursday_enabled) or 
        (current_day == 4 and friday_enabled) or
        (current_day == 5 and saturday_enabled) or
        (current_day == 6 and sunday_enabled)
      }}'
  - condition: template
    value_template: >-
      '{{ sensors != '''' }}'


action:
  - choose: []
    default: !input 'actions'
  
mode: single
max_exceeded: silent